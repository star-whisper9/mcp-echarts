import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,b as a,o as e}from"./app-VvJckTJF.js";const n={};function l(h,s){return e(),t("div",null,s[0]||(s[0]=[a(`<h1 id="输出日志" tabindex="-1"><a class="header-anchor" href="#输出日志"><span>输出日志</span></a></h1><h2 id="日志模块" tabindex="-1"><a class="header-anchor" href="#日志模块"><span>日志模块</span></a></h2><p>在 <code>1.2.0</code> 版本，我们重构了项目的日志模块，选用了 <code>log4js</code> 作为项目的日志模块，实现了一个简单的封装 <code>utils/log.ts</code>。</p><p>此封装导出了一个 <code>initLogger()</code> 方法，被在主模块中调用，初始化日志系统。随后导出了一个单例的 <code>log</code> 对象，你应使用这个导出进行日志输出。</p><p>示例代码：</p><div class="language-typescript line-numbers-mode" data-highlighter="shiki" data-ext="typescript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-typescript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;@/utils/log.js&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 随后直接像你自己使用 log4js 一样使用 log 对象即可</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">debug</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;这是一个调试日志&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">info</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;这是一个信息日志&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">warn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;这是一个警告日志&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">error</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;这是一个错误日志&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="stdio-中的日志" tabindex="-1"><a class="header-anchor" href="#stdio-中的日志"><span>STDIO 中的日志</span></a></h3><p>由于 STDIO 通信的特性，开发者不应该在一个 STDIO 通信的 MCP 服务中输出任何 STDOUT 日志（STDOUT 被用作通信消息）。<strong>我们遵循这个规范，你进行开发时也应该遵循这个规范。</strong></p><p>简单来说：<strong>不要在 STDIO 模式的代码中使用任何 STDOUT 输出信息，若有必要，使用 STDERR。</strong></p><h3 id="默认情况" tabindex="-1"><a class="header-anchor" href="#默认情况"><span>默认情况</span></a></h3><p>在我们的日志封装中，对服务模式进行了判断，并配置了 <strong>STDIO 和文件记录器</strong>。默认情况下，日志将会遵循这样的输出规则：</p><ul><li>文件记录等级：<code>WARN</code></li><li>STDIO 记录等级：<code>INFO</code></li></ul><table><thead><tr><th>传输模式</th><th>启用的记录器</th></tr></thead><tbody><tr><td>STDIO</td><td>仅文件</td></tr><tr><td>其他模式</td><td>文件和 STDIO</td></tr></tbody></table><p>你可以在应用配置中覆写记录等级，但<strong>不能为 STDIO 模式启用 STDIO 记录器</strong>。（如果你必须要这么做，你需要修改 <code>utils/log.ts</code> 中的代码。）</p><h3 id="日志文件位置" tabindex="-1"><a class="header-anchor" href="#日志文件位置"><span>日志文件位置</span></a></h3><p>日志文件将会根据操作系统的不同，存储在不同的位置。我们没有在配置中提供修改功能，你需要修改 TypeScript 源码。</p><ul><li>Windows: <code>%LOCALAPPDATA%/mcp-echarts/logs</code> 或 <code>os.homedir()/mcp-echarts/logs</code></li><li>macOS: <code>os.homedir()/Library/Logs/mcp-echarts</code></li><li>Linux: <code>os.homedir()/.mcp-echarts/logs</code></li></ul>`,17)]))}const p=i(n,[["render",l]]),d=JSON.parse('{"path":"/docs/logging.html","title":"输出日志","lang":"zh-CN","frontmatter":{"title":"输出日志","icon":"ix:log","order":3,"description":"输出日志 日志模块 在 1.2.0 版本，我们重构了项目的日志模块，选用了 log4js 作为项目的日志模块，实现了一个简单的封装 utils/log.ts。 此封装导出了一个 initLogger() 方法，被在主模块中调用，初始化日志系统。随后导出了一个单例的 log 对象，你应使用这个导出进行日志输出。 示例代码： STDIO 中的日志 由于 S...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"输出日志\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-10T02:54:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"starwhisper9\\",\\"url\\":\\"https://github.com/star-whisper9\\"}]}"],["meta",{"property":"og:url","content":"https://star-whisper9.github.io/mcp-echarts/docs/logging.html"}],["meta",{"property":"og:site_name","content":"MCP-ECharts 文档"}],["meta",{"property":"og:title","content":"输出日志"}],["meta",{"property":"og:description","content":"输出日志 日志模块 在 1.2.0 版本，我们重构了项目的日志模块，选用了 log4js 作为项目的日志模块，实现了一个简单的封装 utils/log.ts。 此封装导出了一个 initLogger() 方法，被在主模块中调用，初始化日志系统。随后导出了一个单例的 log 对象，你应使用这个导出进行日志输出。 示例代码： STDIO 中的日志 由于 S..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-07-10T02:54:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-10T02:54:00.000Z"}],["link",{"rel":"alternate","hreflang":"en-us","href":"https://star-whisper9.github.io/mcp-echarts/en/docs/logging.html"}]]},"git":{"createdTime":1752116040000,"updatedTime":1752116040000,"contributors":[{"name":"starwhisper9","username":"starwhisper9","email":"star@sotis.space","commits":1,"url":"https://github.com/starwhisper9"}]},"readingTime":{"minutes":1.59,"words":476},"filePathRelative":"docs/logging.md","autoDesc":true}');export{p as comp,d as data};
