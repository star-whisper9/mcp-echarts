import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as e,o as n}from"./app-VvJckTJF.js";const t={};function l(r,s){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="多用户" tabindex="-1"><a class="header-anchor" href="#多用户"><span>多用户</span></a></h1><p>除了通过 <code>stdio</code> 传输为本地单用户提供服务，你还可以将其部署为支持多用户的 HTTP 服务。目前支持 <code>Streamable HTTP</code> 和 <em><code>SSE</code>(已弃用)</em> 两种传输。</p><h2 id="streamable-http" tabindex="-1"><a class="header-anchor" href="#streamable-http"><span>Streamable HTTP</span></a></h2><p>Streamable HTTP 是目前 MCP 协议所推荐的 HTTP 传输方式，用于取代此前的 SSE(Server-Sent Events) 传输方式。你同样可以使用 <code>npx</code> 将此包部署为 HTTP 传输，只需要配置以下内容：</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-yaml"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 演示以 yaml 作为示例</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  transport</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">http</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  port</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">12345</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  host</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">127.0.0.1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">resource</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  resourcePath</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/Path/To/ResourceDir</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  geoJsonPath</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/Path/To/GeoJsonDir</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中的重要配置是 <code>transport</code>。其余配置参见<a href="./config">配置</a>。</p><h2 id="sse" tabindex="-1"><a class="header-anchor" href="#sse"><span>SSE</span></a></h2><p>为了兼容旧客户端，我们保留了一个基础的 SSE 服务端实现。<strong>在客户端支持的情况下，你应优先选用 Streamable HTTP 传输</strong>。</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-yaml"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  transport</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">sse</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  port</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">12345</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  host</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">127.0.0.1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">resource</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  resourcePath</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/Path/To/ResourceDir</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  geoJsonPath</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/Path/To/GeoJsonDir</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="安全建议" tabindex="-1"><a class="header-anchor" href="#安全建议"><span>安全建议</span></a></h2><ul><li>避免监听 <code>0.0.0.0</code></li><li>在生产环境中，建议使用 HTTPS 传输</li><li>合理配置 CORS 规则，避免不必要的跨域请求</li><li><em>对于公网服务，自行实现身份验证，避免未授权访问</em></li></ul><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h2><p>在对应客户端中，新建服务部署的传输方式的 MCP 服务，URL 设置为服务暴露的 URL。</p>`,13)]))}const d=i(t,[["render",l]]),k=JSON.parse('{"path":"/guide/multi-user.html","title":"多用户","lang":"zh-CN","frontmatter":{"title":"多用户","icon":"flowbite:users-outline","order":2,"description":"多用户 除了通过 stdio 传输为本地单用户提供服务，你还可以将其部署为支持多用户的 HTTP 服务。目前支持 Streamable HTTP 和 SSE(已弃用) 两种传输。 Streamable HTTP Streamable HTTP 是目前 MCP 协议所推荐的 HTTP 传输方式，用于取代此前的 SSE(Server-Sent Events...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"多用户\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-07T10:04:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"starwhisper9\\",\\"url\\":\\"https://github.com/star-whisper9\\"}]}"],["meta",{"property":"og:url","content":"https://star-whisper9.github.io/mcp-echarts/guide/multi-user.html"}],["meta",{"property":"og:site_name","content":"MCP-ECharts 文档"}],["meta",{"property":"og:title","content":"多用户"}],["meta",{"property":"og:description","content":"多用户 除了通过 stdio 传输为本地单用户提供服务，你还可以将其部署为支持多用户的 HTTP 服务。目前支持 Streamable HTTP 和 SSE(已弃用) 两种传输。 Streamable HTTP Streamable HTTP 是目前 MCP 协议所推荐的 HTTP 传输方式，用于取代此前的 SSE(Server-Sent Events..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-07-07T10:04:55.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-07T10:04:55.000Z"}],["link",{"rel":"alternate","hreflang":"en-us","href":"https://star-whisper9.github.io/mcp-echarts/en/guide/multi-user.html"}]]},"git":{"createdTime":1751882695000,"updatedTime":1751882695000,"contributors":[{"name":"starwhisper9","username":"starwhisper9","email":"star@sotis.space","commits":1,"url":"https://github.com/starwhisper9"}]},"readingTime":{"minutes":1.06,"words":318},"filePathRelative":"guide/multi-user.md","autoDesc":true}');export{d as comp,k as data};
